[{"C:\\xampp\\htdocs\\juniortest\\src\\index.js":"1","C:\\xampp\\htdocs\\juniortest\\src\\App.js":"2","C:\\xampp\\htdocs\\juniortest\\src\\Card.js":"3"},{"size":198,"mtime":1607973053653,"results":"4","hashOfConfig":"5"},{"size":5711,"mtime":1607999191523,"results":"6","hashOfConfig":"5"},{"size":1359,"mtime":1607988884736,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"11ks3aw",{"filePath":"11","messages":"12","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\juniortest\\src\\index.js",[],["16","17"],"C:\\xampp\\htdocs\\juniortest\\src\\App.js",["18","19","20","21","22","23","24","25"],"import React,{useEffect,useState} from 'react';\nimport {AppBar,Badge,\n  CssBaseline,\n  Container, CircularProgress,Typography,TextField,Tab,Tabs,Chip,FormControlLabel,Checkbox, Button} from '@material-ui/core';\nimport {makeStyles,withStyles} from '@material-ui/core/styles'\nimport JCard from './Card';\n\n\nconst myStyles=makeStyles({\n  form: {\n    display:'flex',\n    alignItems:'center',\n    justifyContent: 'center',\n    '& > *':{\n      margin:20,\n      width:'25ch',\n    },\n  },\n\n});\nfunction Spinner(){\n  return (\n    <div style={{textAlign:'center',padding:'2rem'}}>\n      <CircularProgress/>\n    </div>\n  )\n}\n\nfunction App() {\n  const [jokes,setJokes] =useState([]);\n  const [jokeToShow, setJokesToShow] = useState([]);\n  const [categories,setCategories] = useState([]);\n  const [filterCategories,setFilterCategories] = useState([]);\n\n\n \n  const [likedJokes,setLikedJokes]= useState([]);\n  const [currentTab,setCurrentTab] = useState(0);\n  const [firstName,setFirstName] = useState ('Chuck');\n  const [lastName,setLastName] = useState ('Norris');\n\n\n  const [loading,setLoading] =useState(false);\n  const classes = myStyles();\n  \n\n\n  useEffect( () => {\n    setLoading(true)\n    fetchAndSetJokes()\n    fetch('https://api.icndb.com/categories').\n    then( res => res.json()).then(res =>{\n      setCategories(res.value);\n      setFilterCategories(res.value)\n      setLoading(false)\n    })\n    .catch(err   => console.log(err))\n  },[]);\nconst fetchAndSetJokes = ()=>{\n  fetch( `https://api.icndb.com/jokes?firstName=${firstName}&lastName=${lastName}`).then(\n    (res) => res.json()\n   ).then((res) =>{\n     console.log(res);\n     setJokes(res.value);\n     setJokesToShow(res.value.slice(0,10));\n     setLoading(false)\n  })\n   .catch((err) => console.log(err));\n}\n\n      const likeJoke = (id) => {\n      if(likedJokes.find(j => j.id ===id)) return\n      const likedJoke = jokes.find(j => j.id ===id);\n      setLikedJokes([likedJoke,...likedJokes])\n      } \n\n     \n      const unlikeJoke = (id) => {\n     const newLikedJokes = likedJokes.filter(j => j.id !==id)\n     setLikedJokes(newLikedJokes);\n      }\n      const changeTab = (event, value) =>{\n        setCurrentTab(value)\n      }\n      const addMoreJokes =() => {\n         setLoading(true)\n         setTimeout(()=> {\n          setJokesToShow(jokes.slice(0,jokeToShow.length + 10));\n          setLoading(false)\n\n         },400);\n        \n      }\n\n        const observeElement = (bottomJoke) =>{   \n          if(!bottomJoke) return         \nconst observer = new IntersectionObserver((entries)=>{\nif(entries[0].isIntersecting ===  true){\n  console.log('Adding more jokes')\n addMoreJokes();\n observer.unobserve(bottomJoke)\n}\n\n},\n{\nthreshold: 1\n}  \n);     \nobserver.observe(bottomJoke);\n};\n\nuseEffect(()=>{\n  const bottomJokeE1 = document.\n  getElementById(`joke-${jokeToShow.length - 1}`);\n\n  observeElement(bottomJokeE1);\n},[jokeToShow]) ;  \n\nconst toggleCategory = (event)=> {\n  const category = event.target.name\n  if(filterCategories.includes(category)){\n    const filterCategoriesCopy = [...filterCategories]\n const categoryIndex = filterCategoriesCopy.indexOf(category)\n  filterCategoriesCopy.splice(categoryIndex, 1)\n  setFilterCategories(filterCategoriesCopy)\n  }\n  else{\n    setFilterCategories([...filterCategories,category])\n  }\n}\n\nconst categoryMatch = (jokeCategories)=> {\n  for(let i=0; i < jokeCategories.length; i++){\n    if(filterCategories.includes(jokeCategories[i]))\n    return true; \n  }\nreturn false;\n}\n\nconst changeJokes = (e) =>{\n  e.preventDefault();\n  if(firstName ==='' || lastName ==='') return\n  fetchAndSetJokes()\n\n}\n \n\n  return (\n    <div className=\"App\">\n\n      <CssBaseline/>\n        <Container>\n        <Typography variant=\"h3\" align=\"center\" style={{marginTop:'50px'}}>\n        Apprenticeship Program Test\n      </Typography>\n      <AppBar style={{marginBottom:10}}>\n      <Tabs value={ currentTab} onChange={changeTab}>\n        <Tab label=\"Home\" id=\"home-tab\" aria-controls=\"home-panel\"/>\n        <Tab label={\n          <Badge\n          color=\"secondary\"\n          badgeContent={\n            likedJokes.length > 0 ? likedJokes.length: null\n          }>\n            Likes\n          </Badge>\n        } id=\"like-tab\" aria-controls=\"like-panel\"/>\n      </Tabs>\n      </AppBar>\n      <div role=\" tabpanel\" hidden ={currentTab !==0}>\n       <div style={{display: 'flex',flexDirection: 'column',justifyContent:'center'}}>\n       <form onSubmit ={changeJokes} noValidate className={classes.form} >\n          <TextField id =\"firstName\"  label = \"First value\" value={firstName}\n          onChange={ e => setFirstName (e.target.value)}/>\n           <TextField id =\"lastName\"  label = \"Last value\" value={lastName  }\n          onChange={ e => setLastName (e.target.value)}/>\n<Button type=\"submit\" variant=\"contained\" color=\"primary\">submit</Button>\n        </form>\n\n       </div>\n        {categories.map(category=>(\n          <FormControlLabel key={category} control={<Checkbox\n          name={category} color=\"primary\" \n          checked={filterCategories.includes(category) } onChange ={toggleCategory}/>}\n          label={category}/>\n\n        \n        ))}\n      {jokeToShow.map((joke,index) =>{\n        if (joke.categories.length === 0 || categoryMatch(joke.categories)){\n        return(\n        <JCard key={joke.id } \n        joke={joke} \n        likeJoke={likeJoke}\n         unlikeJoke={unlikeJoke} index={index}/>\n      );\n        }\n      })}\n      {loading && <Spinner/>}\n      </div>\n     <div role=\"tabpanel\" hidden ={currentTab !==1}>\n     {likedJokes.map(joke =>(\n      <JCard key={joke.id }joke={joke} likeJoke={likeJoke} unlikeJoke={unlikeJoke}/>\n      ))}\n     </div>\n</Container>\n    \n    </div>\n  );\n}\n\nexport default App;\n","C:\\xampp\\htdocs\\juniortest\\src\\Card.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":4,"column":61,"nodeType":"32","messageId":"33","endLine":4,"endColumn":65},{"ruleId":"30","severity":1,"message":"34","line":5,"column":20,"nodeType":"32","messageId":"33","endLine":5,"endColumn":30},{"ruleId":"35","severity":1,"message":"36","line":51,"column":46,"nodeType":"37","messageId":"38","endLine":51,"endColumn":47,"fix":"39"},{"ruleId":"40","severity":1,"message":"41","line":58,"column":5,"nodeType":"42","endLine":58,"endColumn":7,"suggestions":"43"},{"ruleId":"35","severity":1,"message":"36","line":113,"column":32,"nodeType":"37","messageId":"38","endLine":113,"endColumn":33,"fix":"44"},{"ruleId":"40","severity":1,"message":"45","line":117,"column":3,"nodeType":"42","endLine":117,"endColumn":15,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":170,"column":12,"nodeType":"49","endLine":170,"endColumn":28},{"ruleId":"50","severity":1,"message":"51","line":189,"column":36,"nodeType":"52","messageId":"53","endLine":189,"endColumn":38},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Chip' is defined but never used.","Identifier","unusedVar","'withStyles' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"56","text":"57"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAndSetJokes'. Either include it or remove the dependency array.","ArrayExpression",["58"],{"range":"59","text":"60"},"React Hook useEffect has a missing dependency: 'observeElement'. Either include it or remove the dependency array.",["61"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",[1245,1251],"\n    .",{"desc":"62","fix":"63"},[2785,2789],"\n  .",{"desc":"64","fix":"65"},"Update the dependencies array to be: [fetchAndSetJokes]",{"range":"66","text":"67"},"Update the dependencies array to be: [jokeToShow, observeElement]",{"range":"68","text":"69"},[1431,1433],"[fetchAndSetJokes]",[2873,2885],"[jokeToShow, observeElement]"]